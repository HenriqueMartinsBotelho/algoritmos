vertices
1 0 0 0
2 0 1 0
3 0 0 1

edges
1 1 2
2 2 3
3 3 1

faces
1 1 2 3

read
replace_load "st.fe";
background:=WHITE;
define v1 real[2];
define v2 real[2];
im:=max(vertices,id);
ct:=0;dt:=0;cd:=1;

foreach vertex vv where valence>1 do{
    mc:=-1/2;ff:=1;sf:=2;
    if dt then 
        cd:=(vv.id<=im)&&(max(vv.edges,color)<2);
    if cd then{
        for (fnx:=1;fnx<=valence-1;fnx++)
            for (snx:=fnx+1;snx<=valence;snx++){
                v1[1]:=vv.edge[fnx].x;v1[2]:=vv.edge[fnx].y;
                v2[1]:=vv.edge[snx].x;v2[2]:=vv.edge[snx].y;
                ca:=(v1[1]*v2[1]+v1[2]*v2[2])/sqrt(v1[1]^2+v1[2]^2)/sqrt(v2[1]^2+v2[2]^2);
                if ca>mc then{
                    mc:=ca;ff:=fnx;sf:=snx;
                };
            };
    };
  if !dt then{
    ce:=vv.edge[ff].length;be:=vv.edge[sf].length;ae:=sqrt(be^2+ce^2-2*mc*be*ce);
    if (ce^2>=ae^2+be^2+ae*be)||(be^2>=ae^2+ce^2+ae*ce) then{
        if ce>be then{
            vv.edge[ff].color:=RED;vv.edge[sf].color:=MAGENTA;
        }
        else{
            vv.edge[ff].color:=MAGENTA;vv.edge[sf].color:=RED;
        };
        if (vv.id=vv.edge[ff].vertex[1].id) then 
            id1:=vv.edge[ff].vertex[2].id
        else 
            id1:=vv.edge[ff].vertex[1].id;
        if (vv.id=vv.edge[sf].vertex[1].id) then 
            id2:=vv.edge[sf].vertex[2].id
        else 
            id2:=vv.edge[sf].vertex[1].id;
    ne:=new_edge(id1,id2);
    edge[ne].color:=BLUE;
    dissolve edges where color=RED;
    ct:=ct+1;
    };
  };
  };
